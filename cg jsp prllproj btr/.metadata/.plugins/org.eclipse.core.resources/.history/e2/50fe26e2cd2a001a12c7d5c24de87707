package com.cg.forestrymanagementcollections.controller;

import java.util.HashMap;
import java.util.Scanner;
import java.util.Set;

import com.cg.forestrymanagementcollections.bean.ContractBean;
import com.cg.forestrymanagementcollections.factory.ContractFactory;
import com.cg.forestrymanagementcollections.service.ContractService;
import com.cg.forestrymanagementcollections.validations.Validations;
import java.util.Map.Entry;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class Contract {
	public void contractor() {
	
		ContractService services=ContractFactory.instanceofContractServices();
		ContractBean bean=new ContractBean();
		Scanner sc=new Scanner(System.in);
		Validations validations=new Validations();
		while (true) {
			System.out.println("Enter 1 to insert contract data");
			System.out.println("Enter 2 to delete contract data");
			System.out.println("Enter 3 to get contract data");
			System.out.println("Enter 4 to get all contract details");
			System.out.println("Enter 5 to update contract data");
			System.out.println("Enter 6 to return to home");
			String choice=sc.next();
			Pattern pattern = Pattern.compile("^[1-6]{1}$");
			boolean isValidChoice=true;
			do {
				Matcher matcher = pattern.matcher(choice);
				if(matcher.matches()) {
					isValidChoice=false;
				}else {
					System.out.println("Please Enter valid choice");
					choice=sc.next();
				}
			}while(isValidChoice);
			switch (Integer.parseInt(choice)) {
			case 1 :
				ContractBean contract=new ContractBean();
				System.out.println("Enter contractno");
				String contractNo=sc.next();
				boolean isValidNo=validations.idValidation(contractNo);
				while (!isValidNo) {
					System.out.println("Please enter contract no again");
					contractNo= sc.next();
					if (validations.idValidation(contractNo)) {
						break ;
					}
				}
				contract.setContractno(Integer.parseInt(contractNo));
				System.out.println("Enter customerid");
				String customerId=sc.next();
				boolean isValidId=validations.idValidation(customerId);
				while (!isValidId) {
						System.out.println("Please enter customer Id again");
						customerId= sc.next();
						if (validations.idValidation(customerId)) {
							break ;
						}
					}
				contract.setCustomerid(Integer.parseInt(customerId));
				System.out.println("Enter productid");
				String productId=sc.next();
				boolean isValidProductId=validations.idValidation(productId);
				while (!isValidProductId) {
						System.out.println("Please enter product Id again");
						productId= sc.next();
						if (validations.idValidation(productId)) {
							break ;
						}
					}
				contract.setProductid(Integer.parseInt(productId));
				System.out.println("Enter haulierid");
				String haulierId=sc.next();
				boolean isValidHaulierId=validations.idValidation(haulierId);
				while (!isValidHaulierId) {
						System.out.println("Please enter haulier Id again");
						haulierId= sc.next();
						if (validations.idValidation(haulierId)) {
							break ;
						}
					}
				contract.setHaulierid(Integer.parseInt(haulierId));
				System.out.println("enter delivery date(dd/mm/yyyy)");
				String deliveryDate=sc.next();
				boolean isValidDate=validations.dateValidation(deliveryDate);
				while (!isValidDate) {
						System.out.println("Please enter delivery date again");
						deliveryDate= sc.next();
						if (validations.dateValidation(deliveryDate)) {
							break ;
						}
				}
				contract.setDeliverydate(deliveryDate);
				System.out.println("enter delivery day(Full week day)");
				String deliveryDay=sc.next();
				boolean isValidDay=true;
				do{
					if (deliveryDay.equalsIgnoreCase("Monday")||deliveryDay.equalsIgnoreCase("Tuesday")||
							deliveryDay.equalsIgnoreCase("Wednesday")||deliveryDay.equalsIgnoreCase("Thursday")||
							deliveryDay.equalsIgnoreCase("Friday")||deliveryDay.equalsIgnoreCase("Saturday")||
							deliveryDay.equalsIgnoreCase("Sunday")) {
						isValidDay=false;
					}else {
						System.out.println("Please,Enter Valid week day ");
						deliveryDay=sc.next();
					}
				}while(isValidDay);
				contract.setDeliveryday(deliveryDay);
				System.out.println("Enter quantity");
				String quantity=sc.next();
				boolean isValidQuantity=validations.idValidation(quantity);
				while (!isValidQuantity) {
						System.out.println("Please enter contract no again");
						quantity= sc.next();
						if (validations.idValidation(contractNo)) {
							break ;
						}
				}
				contract.setQuantity(Integer.parseInt(quantity));
				boolean check=services.addContract(Integer.parseInt(contractNo),contract);
				if (check) {
					System.out.println("Contract added successfuly");
				} else {
					System.out.println("ContractNo is repeated");
				}
				break;
			case 2:	System.out.println("Enter contractno to delete contract");
			try {
				String contractNo2=sc.next();
				if(services.deleteContract(Integer.parseInt(contractNo2))) {
					System.out.println("Contract deleted");
				}else {
					System.out.println("Contract not found to delete");
				}
			}catch (Exception e) {
				System.out.println("ContractNo is invalid");
			}
			break;
			case 3 : System.out.println("Enter contractNo to search contract");
			try {
			int contractNo1=sc.nextInt();
				if(bean!=null) {
					ContractBean contractBean1=services.getContract(contractNo1);
					System.out.println("Customer Id : "+contractBean1.getCustomerid());
					System.out.println("Product id : "+contractBean1.getProductid());
					System.out.println("Haulier Id : "+contractBean1.getHaulierid());
					System.out.println("Delivery date : "+contractBean1.getDeliverydate());
					System.out.println("Delivery day : "+contractBean1.getDeliveryday());
					System.out.println("Quantity : "+contractBean1.getQuantity());
					System.out.println();
				}
			}catch (Exception e) {
				System.out.println("ContractNo is invalid or not found");
			}
			break;
			case 4 : 
				System.out.println("Contract Details : ");
				HashMap<Integer,ContractBean> contract1=services.getAllContracts();
				try {
					if(contract1!=null) {
						for (Entry<Integer,ContractBean> contractbean:contract1.entrySet()) {
							System.out.println("Contract No : "+contractbean.getKey());
							System.out.println("Customer id : "+contractbean.getValue().getCustomerid());
							System.out.println("Product Id : "+contractbean.getValue().getProductid());
							System.out.println("Haulier Id : "+contractbean.getValue().getHaulierid());
							System.out.println("Delivery Date : "+contractbean.getValue().getDeliveryday());
							System.out.println("Delivary day : "+contractbean.getValue().getDeliveryday());
							System.out.println("Quantity : "+contractbean.getValue().getQuantity());
							System.out.println("***********************************************");
							System.out.println();
						}
					}
				}catch (Exception e) {
					System.out.println("No Contracts found");
				}
				break;
			case 5 : System.out.println("Enter ContractNo to modify contract");
			try {
			int contractNo1=sc.nextInt();
			HashMap<Integer,ContractBean> contract2=services.getAllContracts();
			boolean isupdate = false;
			for(Entry<Integer, ContractBean> cont : contract2.entrySet()) {
				if(cont.getKey() == contractNo1) {
					isupdate = true;
				}
			}
				
			
			ContractBean beans=new ContractBean();
			if(isupdate) {
			System.out.println("Enter customer id");
			String newCustomerId=sc.next();
			boolean isValidNewId=validations.idValidation(newCustomerId);
			while (!isValidNewId) {
					System.out.println("Please enter customer Id again");
					newCustomerId= sc.next();
					if (validations.idValidation(newCustomerId)) {
						break ;
					}
				}
			beans.setCustomerid(Integer.parseInt(newCustomerId));
			System.out.println("enter product id");
			String newProductId=sc.next();
			boolean isValidNewProductId=validations.idValidation(newProductId);
			while (!isValidNewProductId) {
					System.out.println("Please enter product Id again");
					newProductId= sc.next();
					if (validations.idValidation(newProductId)) {
						break ;
					}
				}
			beans.setProductid(Integer.parseInt(newProductId));
			System.out.println("enter haulier id");
			String newHaulierId=sc.next();
			boolean isValidNewHaulierId=validations.idValidation(newHaulierId);
			while (!isValidNewHaulierId) {
					System.out.println("Please enter haulier Id again");
					newHaulierId= sc.next();
					if (validations.idValidation(newHaulierId)) {
						break ;
					}
				}
			beans.setHaulierid(Integer.parseInt(newHaulierId));
			System.out.println("enter delivery date");
			String newDeliveryDate=sc.next();
			boolean isValidDeliveryDate=validations.dateValidation(newDeliveryDate);
			while (!isValidDeliveryDate) {
					System.out.println("Please enter delivery date again");
					newDeliveryDate= sc.next();
					if (validations.dateValidation(newDeliveryDate)) {
						break ;
					}
				}
			beans.setDeliverydate(newDeliveryDate);
			System.out.println("enter delivery day");
			String newDeliveryDay=sc.next();
			boolean isValidDeliveryDay=true;
			do{
				if (newDeliveryDay.equalsIgnoreCase("Monday")||newDeliveryDay.equalsIgnoreCase("Tuesday")||
						newDeliveryDay.equalsIgnoreCase("Wednesday")||newDeliveryDay.equalsIgnoreCase("Thursday")||
						newDeliveryDay.equalsIgnoreCase("Friday")||newDeliveryDay.equalsIgnoreCase("Saturday")||
						newDeliveryDay.equalsIgnoreCase("Sunday")) {
					isValidDay=false;
				}else {
					System.out.println("Please,Enter Valid week day ");
					newDeliveryDay=sc.next();
				}
			}while(isValidDeliveryDay);
			beans.setDeliveryday(newDeliveryDay);
			System.out.println("enter quantity");
			String newQuantity=sc.next();
			boolean isValidQuantity1=validations.idValidation(newQuantity);
			while (!isValidQuantity1) {

					System.out.println("Please enter contract no again");
					newQuantity= sc.next();
					if (validations.idValidation(newQuantity)) {
						break ;
					}
			}
			beans.setQuantity(Integer.parseInt(newQuantity));
			boolean check1=services.updateContract(contractNo1,beans);
			if(check1) {
				System.out.println("Contract updated succesfully");
			}else {
				System.out.println("Contract not found to update");
			}
			}catch (Exception e) {
				System.out.println("Sorry...!!!ContractNo is invalid");
			}
			break;
			case 6: 
				return ;
			default : 
				break;
			}
		}
	}
}
