package com.cg.forestrymanagementjpa.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.Query;

import com.cg.forestrymanagementjpa.bean.ContractBean;
import com.cg.forestrymanagementjpa.exceptions.ValidationExceptions;

public class ContractDaoImpl implements ContractDao {
	EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("forestrymanagement");
	EntityManager entityManager = null;
	EntityTransaction transaction = null;

	@Override
	public List<ContractBean> getAllContracts() {
		try {
			entityManager = entityManagerFactory.createEntityManager();
			String getAllContracts = "from ContractBean";
			Query query = entityManager.createQuery(getAllContracts);
			List<ContractBean> list = query.getResultList();
			if (!list.isEmpty()) {
				return list;
			}
		} catch (Exception e) {
			throw new ValidationExceptions();
		}
		return null;
	}

	@Override
	public boolean deleteContract(int contractNo) {
		try {
			entityManager = entityManagerFactory.createEntityManager();
			transaction = entityManager.getTransaction();
			transaction.begin();
			ContractBean contractBean1 = entityManager.find(ContractBean.class, contractNo);
			if (contractBean1 != null) {
				entityManager.remove(contractBean1);
				transaction.commit();
				return true;
			}
		} catch (Exception e) {
			throw new ValidationExceptions();
		}
		return false;
	}

	@Override
	public boolean insertContract(ContractBean bean) {
		try {
			entityManager = entityManagerFactory.createEntityManager();
			ContractBean contractBean1 = entityManager.find(ContractBean.class, bean.getContractNo());
			if (contractBean1 == null) {
				transaction = entityManager.getTransaction();
				transaction.begin();
				entityManager.persist(bean);
				transaction.commit();
				return true;
			}
		} catch (Exception e) {
			transaction.rollback();
			throw new ValidationExceptions();
		}
		entityManager.close();
		return false;
	}

	@Override
	public ContractBean contractLogin(int contractNo) {
		try {
			entityManager = entityManagerFactory.createEntityManager();
			ContractBean contractBean = entityManager.find(ContractBean.class, contractNo);
			if (contractBean != null) {
				return contractBean;
			}
		} catch (Exception e) {
			throw new ValidationExceptions();
		}
		return null;
	}

	@Override
	public boolean updateContract(int contractNo, ContractBean bean) {
		try {
			entityManager = entityManagerFactory.createEntityManager();
			transaction = entityManager.getTransaction();
			ContractBean contractBean = entityManager.find(ContractBean.class, contractNo);
			transaction.begin();
			String updateCustomerJpql = "update ContractBean SET deliveryDate=:deliveryDate,quantity=:quantity where contractNo=:contractNo";
			Query query = entityManager.createQuery(updateCustomerJpql);
			query.setParameter("deliveryDate", bean.getDeliveryDate());
			query.setParameter("quantity", bean.getQuantity());
			query.setParameter("contractNo", contractNo);
			int isUpdatedName = query.executeUpdate();
			if (isUpdatedName > 0) {
				contractBean.setDeliveryDate(bean.getDeliveryDate());
				contractBean.setQuantity(bean.getQuantity());
				transaction.commit();
				return true;
			}
		} catch (Exception e) {
			throw new ValidationExceptions();
		}
		return false;
	}
}
