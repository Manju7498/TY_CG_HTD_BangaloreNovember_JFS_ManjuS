package com.cg.forestrymanagementspringboot.controller;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.cg.forestrymanagementspringboot.dto.ContractBean;
import com.cg.forestrymanagementspringboot.dto.ForestryResponse;
import com.cg.forestrymanagementspringboot.dto.UserBean;
import com.cg.forestrymanagementspringboot.service.UserService;

@RestController
@CrossOrigin(origins = "*",allowedHeaders = "*",allowCredentials = "true")
public class UserController {
		@Autowired
		UserService service;

		@PostMapping(path = "/user-login", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
		public ForestryResponse auth(@RequestBody UserBean bean) {
			ForestryResponse response = new ForestryResponse();
			UserBean userBean = service.login(bean);
			if (userBean != null) {
				response.setStatusCode(201);
				response.setMessage("success");
				response.setDescription("user logged in successfully");
				response.setUser(Arrays.asList(userBean));
			} else {
				response.setStatusCode(401);
				response.setMessage("Failure");
				response.setDescription("Invalid password");
			}
			return response;
		}

		@PostMapping(path = "/add-user", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
		public ForestryResponse register(@RequestBody UserBean bean) {
			ForestryResponse response = new ForestryResponse();
			if (service.addUser(bean)) {
				response.setStatusCode(201);
				response.setMessage("success");
				response.setDescription("User registered");
			} else {
				response.setStatusCode(401);
				response.setMessage("Failure");
				response.setDescription("User already registered");
			}
			return response;
		}
		@DeleteMapping(path = "/delete-user/{email}", produces = MediaType.APPLICATION_JSON_VALUE)
		public ForestryResponse deleteUser(@PathVariable("email") String email) {
			ForestryResponse response = new ForestryResponse();
			if (service.deleteUser(email)) {
				response.setStatusCode(201);
				response.setMessage("Success");
				response.setDescription("user deleted");
			} else {
				response.setStatusCode(401);
				response.setMessage("Failure");
				response.setDescription("user not found");
			}
			return response;
		}
		@GetMapping(path = "/view-allUsers", produces = MediaType.APPLICATION_JSON_VALUE)
		public ForestryResponse viewAllUsers() {
			ForestryResponse response = new ForestryResponse();
			List<UserBean> list = service.getAllUsers();
			if (list.size() != 0) {
				response.setStatusCode(201);
				response.setMessage("Success");
				response.setDescription("Users found");
				response.setUser(list);
			} else {
				response.setStatusCode(401);
				response.setMessage("Failure");
				response.setDescription("No data");
			}
			return response;

		}
	}
