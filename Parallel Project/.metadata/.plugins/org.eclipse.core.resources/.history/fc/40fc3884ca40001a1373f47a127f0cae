package com.cg.forestrymanagementjdbc.controller;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.cg.forestrymanagementjdbc.bean.HaulierBean;
import com.cg.forestrymanagementjdbc.bean.ProductBean;
import com.cg.forestrymanagementjdbc.factory.HaulierFactory;
import com.cg.forestrymanagementjdbc.factory.ProductFactory;
import com.cg.forestrymanagementjdbc.main.MainForestry;
import com.cg.forestrymanagementjdbc.service.HaulierService;
//import com.cg.forestrymanagementjdbc.main.MainForestry;
import com.cg.forestrymanagementjdbc.service.ProductService;
import com.cg.forestrymanagementjdbc.validations.Validations;

public class ProductController {
	public void product() {
		ProductService services = ProductFactory.instanceofProductServices();
		Scanner sc = new Scanner(System.in);
		ProductBean bean = new ProductBean();
		Validations validations = new Validations();
		while (true) {
			System.out.println("Enter 1 to insert product data");
			System.out.println("Enter 2 to delete product data");
			System.out.println("Enter 3 to get product data");
			System.out.println("Enter 4 to get all product data");
			System.out.println("Enter 5 to update product  data");
			System.out.println("Enter 6 to return to  home");
			String choice = sc.next();
			Pattern pattern = Pattern.compile("^[1-6]{1}$");
			ProductBean productBean = new ProductBean();
			boolean isValidChoice = true;
			do {
				Matcher matcher = pattern.matcher(choice);
				if (matcher.matches()) {
					isValidChoice = false;
				} else {
					System.out.println("Please Enter valid choice");
					choice = sc.next();
				}
			} while (isValidChoice);

			switch (Integer.parseInt(choice)) {
			case 1:
				try {
					System.out.println("Enter product id");
					String productId = sc.next();
					boolean isValidId = validations.idValidation(productId);
					while (!isValidId) {
						System.out.println("Please enter product Id again");
						productId = sc.next();
						if (validations.idValidation(productId)) {
							break;
						}
					}
					productBean.setProductId(Integer.parseInt(productId));
					System.out.println("Enter product name");
					String productName = sc.next();
					boolean isValidName = validations.nameValidation(productName);
					while (!isValidName) {
						System.out.println("Please enter name again");
						productName = sc.next();
						if (validations.nameValidation(productName)) {
							break;
						}
					}
					productBean.setProductName(productName);
					System.out.println("Enter product orderdate(dd/mm/yyyy)");
					String orderDate = sc.next();
//					boolean isValidDate = validations.dateValidation(orderDate);
//					while (!isValidDate) {
//						System.out.println("Please enter date again");
//						orderDate = sc.next();
//						if (validations.dateValidation(orderDate)) {
//							break;
//						}
//					}
					
					
					//convert String to LocalDate
					LocalDate localDate = LocalDate.parse(date, formatter);
					LocalDate orderdeliveryDate = LocalDate.now();
					System.out.println(dtf.format(orderdeliveryDate));
					productBean.setProdOrderDate(orderdeliveryDate);
					//productBean.setProdOrderDate(orderDate);
					System.out.println("Enter product deliverydate(dd/mm/yyyy)");
					String deliveryDate = sc.next();
					boolean isValidDate1 = validations.dateValidation(deliveryDate);
					while (!isValidDate1) {
						System.out.println("Please enter date again");
						deliveryDate = sc.next();
						if (validations.dateValidation(deliveryDate)) {
							break;
						}
					}
					productBean.setProdDeliveryDate(deliveryDate);
					boolean check = services.insertProduct(productBean);
					if (check) {
						System.out.println("product added");
					} else {
						System.out.println("Id is repeated");
					}
				} catch (Exception e) {
					System.out.println("product cannot be added");
				}
				break;
			case 2:
				System.out.println("Enter id to delete product");
				try {
					int choicetodelete = sc.nextInt();
					if (services.deleteProduct(choicetodelete)) {
						System.out.println("product deleted");
					} else {
						System.out.println("product id not found to delete");
					}
				} catch (Exception e) {
					System.out.println("product id is invalid");
				}
				break;
			case 3:
				System.out.println("Enter id to search product");
				try {
					int cid = sc.nextInt();
					if (bean != null) {
						ProductBean productBean1 = services.productLogin(cid);
						// System.out.println("Product id : " + productBean1.getProductid());
						System.out.println("Product name : " + productBean1.getProductName());
						System.out.println("product order date : " + productBean1.getProdDeliveryDate());
						System.out.println("product delivery date : " + productBean1.getProdDeliveryDate());
						System.out.println();
					}
				} catch (Exception e) {
					System.out.println("ProductId is invalid or not found");
				}
				break;
			case 4:
				System.out.println("product Details : ");
				try {
					List<ProductBean> product = services.getAllProducts();
					if (product != null) {
						for (ProductBean productBean2 : product) {
							System.out.println("Product id : " + productBean2.getProductId());
							System.out.println("Product name : " + productBean2.getProductName());
							System.out.println("product order date : " + productBean2.getProdDeliveryDate());
							System.out.println("product delivery date : " + productBean2.getProdDeliveryDate());
							System.out.println();
						}
					}
				} catch (Exception e) {
					System.out.println("No product found");
				}
				break;
			case 5:
				System.out.println("Enter id to modify product data ");
				try {
					bean = new ProductBean();
					int productId1 = sc.nextInt();
					List<ProductBean> product2 = services.getAllProducts();
					boolean isupdate = false;
					for (ProductBean productBean2 : product2) {
						if (productBean2.getProductId() == productId1) {
							isupdate = true;
						}
					}
					System.out.println("Enter product name");
					String newProductName = sc.next();
					boolean isValidNewName = validations.nameValidation(newProductName);
					while (!isValidNewName) {
						System.out.println("Please enter haulier name again");
						newProductName = sc.next();
						if (validations.nameValidation(newProductName)) {
							break;
						}
					}
					bean.setProductName(newProductName);
					boolean check1 = services.updateProduct(productId1, bean);
					if (check1) {
						System.out.println("product data updated succesfully");
					} else {
						System.out.println("product not found to update");
					}
				} catch (Exception e) {
					System.out.println("Id not found");
				}
				break;
			case 6:
				MainForestry.home();
				break;
			default:
				break;
			}
		}
	}
}
