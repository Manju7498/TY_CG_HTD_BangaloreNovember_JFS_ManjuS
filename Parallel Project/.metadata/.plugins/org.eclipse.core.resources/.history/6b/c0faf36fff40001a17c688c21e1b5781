package com.cg.forestrymanagementjdbc.dao;

import java.io.FileReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;

import com.cg.forestrymanagementjdbc.bean.ProductBean;
import com.cg.forestrymanagementjdbc.exceptions.ForestryExceptions;

public class ProductDaoImpl implements ProductDao {
	FileReader reader;
	Properties prop;
	ProductBean bean;
	Scanner sc = new Scanner(System.in);

	public ProductDaoImpl() {
		try {
			reader = new FileReader("forestrydatabasemanagement.properties");
			prop = new Properties();
			prop.load(reader);
			Class.forName(prop.getProperty("driverClass"));
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}

	@Override
	public List<ProductBean> getAllProducts() {
		List<ProductBean> list = new ArrayList<ProductBean>();
		try (Connection conn = DriverManager.getConnection(prop.getProperty("dbUrl"), prop.getProperty("dbUser"),
				prop.getProperty("dbPassword"));
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(prop.getProperty("allProductsQuery"));) {
			while (rs.next()) {
				bean = new ProductBean();
				bean.setProductId(rs.getInt(1));
				bean.setProductName(rs.getString(2));
				bean.setProductOrderDate(rs.getString(3));
				bean.setProductDeliveryDate(rs.getString(4));
				list.add(bean);
			}
			return list;
		} catch (Exception e) {
			throw new ForestryExceptions();
		}
		return null;
	}

	@Override
	public ProductBean productLogin(int productId) {
		try (Connection conn = DriverManager.getConnection(prop.getProperty("dbUrl"), prop.getProperty("dbUser"),
				prop.getProperty("dbPassword"));
				PreparedStatement pstmt = conn.prepareStatement(prop.getProperty("loginProductQuery"))) {
			pstmt.setInt(1, productId);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				bean = new ProductBean();
				bean.setProductId(rs.getInt(1));
				bean.setProductName(rs.getString(2));
				bean.setProductOrderDate(rs.getString(3));
				bean.setProductDeliveryDate(rs.getString(4));
				return bean;
			}

		} catch (Exception e) {
			throw new ForestryExceptions();
		}
		return null;
	}

	@Override
	public boolean updateProduct(int productId, ProductBean bean) {
		try (Connection conn = DriverManager.getConnection(prop.getProperty("dbUrl"), prop.getProperty("dbUser"),
				prop.getProperty("dbPassword"));
				PreparedStatement pstmt = conn.prepareStatement(prop.getProperty("updateProductNameQuery"));) {
			pstmt.setString(1, bean.getProductName());
			pstmt.setInt(2, productId);
			int count = pstmt.executeUpdate();
			if (count > 0) {
				return true;
			}
		} catch (Exception e) {
			throw new ForestryExceptions();
		}
		return false;
	}

	@Override
	public boolean deleteProduct(int productId) {
		try (Connection conn = DriverManager.getConnection(prop.getProperty("dbUrl"), prop.getProperty("dbUser"),
				prop.getProperty("dbPassword"));
				PreparedStatement pstmt = conn.prepareStatement(prop.getProperty("deleteProductQuery"));) {
			pstmt.setInt(1, productId);
			int count = pstmt.executeUpdate();
			if (count > 0) {
				return true;
			}
		} catch (Exception e) {
			throw new ForestryExceptions();
		}
		return false;
	}

	@Override
	public boolean insertProduct(ProductBean bean) {
		try (Connection conn = DriverManager.getConnection(prop.getProperty("dbUrl"), prop.getProperty("dbUser"),
				prop.getProperty("dbPassword"));
				PreparedStatement pstmt = conn.prepareStatement(prop.getProperty("insertProductQuery"));

		) {
			pstmt.setInt(1, bean.getProductId());
			pstmt.setString(2, bean.getProductName());
			pstmt.setString(3, bean.getProductOrderDate());
			pstmt.setString(4, bean.getProductDeliveryDate());
			int count = pstmt.executeUpdate();
			if (count > 0) {
				return true;
			}
		} catch (Exception e) {
			throw new ForestryExceptions();
		}
		return false;
	}

}
